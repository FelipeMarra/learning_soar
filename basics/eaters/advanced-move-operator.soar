########### Adavanced Move Operator #####################
#################### INITIALIZE #########################
sp {initialize*state*directions
    (state <state> ^type state)
-->
    (<state> ^directions <n> <e> <s> <w>)
    (<n> ^value north ^opposite south)
    (<e> ^value east ^opposite west)
    (<s> ^value south ^opposite north)
    (<w> ^value west ^opposite east)
}

#################### PROPOSE ############################
# Propose*move:
# If there is no wall in an adjacent cell, propose move in 
# the direction of that cell and indicate that this operator 
# can be selected randomly.
# sp {propose*move
#     (state <s> ^io.input-link.my-location.<dir>.content
#                                   { <content> <> wall })
# -->
#     (<s> ^operator <o> + =)
#     (<o> ^name move
#          ^direction <dir>
#          ^content <content>)
# }

# Propose*move*no-backward:
# If there is normalfood, bonusfood, eater, or empty in an
# adjacent cell, and there is no last direction equal to 
# the opposite direction for that cell,
# propose move in the direction of that cell, with the cellâ€™s 
# content, and indicate that this operator can be selected 
# randomly.
sp {propose*move*no-backward
    (state <s> ^io.input-link.my-location.<dir>.content
                                  { <content> <> wall }
               ^directions <directions>
               -^last-direction <last-dir>)

    (<directions> ^value <dir>
                  ^opposite <last-dir>)
-->
    (<s> ^operator <o> + =)
    (<o> ^name move
         ^direction <dir>
         ^content <content>)
}

#################### SELECT ############################
#Would be better to just do like:
# bonus is better
# << empty eater >> are worst
# the normal food would became the 2nd option automatically
#but I'm just following the tutorial here

# Select*move*bonusfood-better-than-normalfood
# If there is a proposed operator to move to a cell with bonusfood
# and there is a second proposed operator to move to a cell that 
# is empty or has normalfood or another eater
# prefer the first operator.
sp {select*move*bonusfood-better-than-normalfood
    (state <s> ^operator <o1> +
                         <o2> +)
    (<o1> ^name move
          ^content bonusfood)

    (<o2> ^name move
          ^content << normalfood eater empty >>)
-->
    (<s> ^operator <o1> > <o2>)
}

# Select*move*avoid-empty-eater
# If there is a proposed operator to move to an empty cell or a cell with
# another eater,
# then avoid that operator.
sp {select*move*avoid-empty-eater
    (state <s> ^operator <o>)
    (<o> ^name move
         ^content << eater empty >>)
-->
    (<s> ^operator <o> <)
}

# Select*move*prefer-normalfood
# If there is a proposed operator to move to a cell with normalfood,
# prefer that operator.
sp {select*move*prefer-normalfood
    (state <s> ^operator <o> +)
    (<o> ^name move
         ^content normalfood)
-->
    (<s> ^operator <o> >)
}

# # Select*move*reject*backward
# # If there is a proposed operator to move in the direction
# # opposite the last move,
# # reject that operator.
# sp {select*move*reject*backward
#     (state <s> ^operator <o> +
#                ^directions <directions>
#                ^last-direction <last-dir>)

#     (<o> ^name move
#          ^direction <direction>)

#     (<directions> ^value <direction>
#                   ^opposite <last-dir>)
# -->
#     (<s> ^operator <o> -)
# }

#################### APPLY ############################
# Apply*move:
# If the move operator is selected to a direction,
# generate an output command to move to that direction.
sp {apply*move
    (state <s> ^io.output-link <out>
               ^operator (^name move
                          ^direction <direction>))
-->
    (<out> ^move.direction <direction>)
}

# Apply*move*remove-move:
# If the move operator is selected,
# and there is a completed move command on the output link,
# then remove that command.
sp {apply*move*remove-move
    (state <s>  ^operator.name move
                ^io.output-link <out>)
    (<out> ^move <direction>)
    (<direction> ^status complete)
-->
    (<out> ^move <direction> -)
}

#============= Last Move ===============================
# Apply*move*last-move
# If the move operator is selected, store the current
# move as the value of the last move attr
sp {apply*move*last-move
    (state <s> ^operator (^name move
                          ^direction <direction>))
-->
    (<s> ^last-direction <direction>)
}

# Apply*move*remove*last-move
# If the move operator is selected, and there is a last
# direction different from the current direction,
# remove that last direction from the WM
sp {apply*move*remove*last-move
    (state <s>  ^last-direction <last-dir>
                ^operator (^name move
                          ^direction {<direction> <> <last-dir>}))
-->
    (<s> ^last-direction <last-dir> -)
}

#################### MONITOR ############################
# Monitor move
sp {monitor*move
    (state <s> ^operator (^name move
                          ^direction <direction>
                          ^content <content>))
-->
    (write |Moving To Direction |<direction>| To Get |<content>||)
}
